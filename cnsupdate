#!/bin/sh

version="$0 version 0.1"
helptext="The purpose of $0 is to update your IP address in cloudflare DNS. \
It will by default try to update A and AAAA records, unless -4 or -6 options \
are used. You can also specify an interface to obtain the IP addresses, \
instead of using remote service."
privip='^(192\.168|10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.)'
v6regex='s/.*"content":"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))".*/\1/'
v4regex='s/.*"content":"(([0-9]{1,3}\.){3}[0-9]{1,3})".*/\1/'

alias log=">&2 echo"
alias get="curl -s -X GET"
alias post="curl -s -X POST"
alias patch="curl -s -X PATCH"

cfgfile=~/.cnsupdate.conf
config_read_file() {
    (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=__UNDEFINED__") | head -n 1 | cut -d '=' -f 2-;
}

config_get() {
    val="$(config_read_file $cfgfile "${1}")";
    if [ "${val}" = "__UNDEFINED__" ]; then
        val="$(config_read_file cnsupdate.conf.defaults "${1}")";
    fi
    printf -- "%s" "${val}";
}

ip_version="$(config_get ip_version)"
use_web="$(config_get use_web)"
use_iface="$(config_get use_iface)"
iface="$(config_get iface)"
auth_email="$(config_get auth_email)"
auth_method="$(config_get auth_method)"
auth_key="$(config_get auth_key)"
zone_identifier="$(config_get zone_identifier)"
record_name="$(config_get record_name)"
ttl="$(config_get ttl)";
proxy="$(config_get proxy)";


# Options override config file
opt=`getopt -o vhd46sri: -- "$@"` || exit 1
eval set -- "$opt"
while true; do
  case $1 in
    (-v) # Show version
      echo $version >&2
      exit 0
      shift
      ;;
    (-h) # Display help
      echo "$helptext" >&2
      grep " (-.)\ #\ " $0
      exit 0
      shift
      ;;
    (-d) # Debug
      set -x
      shift
      ;;
    (-4) # Update A record only
      ip_version="4"
      shift
      ;;
    (-6) # Update AAAA record only
      ip_version="6"
      shift
      ;;
    (-s) # Log to systlog instead of STOUD
      alias log="logger -t $0 -s"
      shift
      ;;
    (-r) # Use remote server to obtain IP
      use_web="true"
      use_iface="false"
      iface=""
      shift
      ;;
    (-i) # Obtain public IP from an interface instead of remote server reply
      #echo "$1 $2" >&2
      iface=$2
      use_web="false"
      use_iface="true"
      shift 2
      ;;
    (--) shift; break;;
    (*)
      echo "Error, we should never get here." >&2
      exit 1
      ;;
  esac
done


# Check if we have a public IP. Will always use the first one found.
get_ip() {
  if [[ $1 = "A" ]]; then
    if [[ $use_web = "false" ]]; then
      log "Using $iface to find IP address"
      ip=$(ip -o -f inet addr show dev $iface | \
            grep 'scope global' | \
            awk -F'[ /]+' ' { print $4; } ' | \
            grep -v -E "$privip" | \
            head -1
      )
    else
      log "Using HTTPS to find IP address"
      ip=$(get https://api.ipify.org || get https://ipv4.icanhazip.com/)
    fi
  fi
  if [[ $1 = "AAAA" ]]; then
    if [[ $use_web = "false" ]]; then
      log "Using $iface to find IP address"
      ip=$(ip -o -f inet6 addr show dev $iface | \
            grep 'scope global' | \
            awk -F'[ /]+' ' {print $4; } ' | \
            head -1
      )
    else
      log "Using HTTPS to find IP address"
      ip=$(get https://api6.ipify.org || get https://ipv6.icanhazip.com/)
    fi
  fi
  # return
  printf -- "%s" "${ip}";
}

###########################################
## Check and set the proper auth header
###########################################
if [[ "${auth_method}" = "global" ]]; then
  auth_header="X-Auth-Key:"
else
  auth_header="Authorization: Bearer"
fi


check_record() {
  if [[ -n "$3" ]]; then
    record=$(get \
            "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?type=$1&name=$2" \
            -H "X-Auth-Email: $auth_email" \
            -H "$auth_header $auth_key" \
            -H "Content-Type: application/json")
    if [[ $record = *"\"count\":0"* ]]; then
      log "$1 record for $2 does not exist. Please create $1 record for $2."
      record_identifier=""
    else
      if [[ $1 = "A" ]]; then
        old_ip=$(echo "$record" | sed -E "$v4regex")
      elif [[ $1 = "AAAA" ]]; then
        old_ip=$(echo "$record" | sed -E "$v6regex")
      fi
      if [[ $3 = $old_ip ]]; then
        log "IP $3 for $2 did not change."
        exit 0
      else
        log "Found record $2 $1 $old_ip"
      fi
      record_identifier=$(echo "$record" | sed -E 's/.*"id":"(\w+)".*/\1/')
    fi
  fi
  printf -- "%s" "${record_identifier}";
}

update_record() {
  update=$(patch \
          "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$2" \
          -H "X-Auth-Email: $auth_email" \
          -H "$auth_header $auth_key" \
          -H "Content-Type: application/json" \
          --data "{\"type\":\"$1\",\"name\":\"$record_name\",\"content\":\"$3\",\"ttl\":\"$ttl\",\"proxied\":${proxy}}")

  case "$update" in
  *"\"success\":false"*)
    log "$record_name $1 $3 update failed for $2. Error message:\n$update"
    ;;
  *)
    log "Updated $record_name $1 $3"
    ;;
  esac
}


if [[ "$ip_version" != "6" ]]; then
  ip=$(get_ip "A")
  if [[ -z "$ip" ]]; then
    log "IPv4 address not found"
  else
    log "Found address $ip"
    record_identifier=$(check_record "A" "$record_name" "$ip")
    if [[ -n "$record_identifier" ]]; then
      result=$(update_record "A" "$record_identifier" "$ip")
    fi
  fi
fi

if [[ "$ip_version" != "4" ]]; then
  ip=$(get_ip "AAAA")
  if [[ -z "$ip" ]]; then
    log "IPv6 address not found"
  else
    log "Found address: $ip"
    record_identifier=$(check_record "AAAA" "$record_name" "$ip")
    if [[ -n "$record_identifier" ]]; then
      result=$(update_record "AAAA" "$record_identifier" "$ip")
    fi
  fi
fi

# vim: filetype=sh:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
